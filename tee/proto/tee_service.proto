syntax = "proto3";

package teeservice;

option go_package = "github.com/rhombus-tech/vm/tee/proto";

service TeeExecution {
    rpc Execute(ExecutionRequest) returns (ExecutionResult);
    rpc GetRegions(GetRegionsRequest) returns (GetRegionsResponse);
    rpc GetAttestations(GetAttestationsRequest) returns (RegionAttestations);
    rpc CreateContract(CreateContractRequest) returns (CreateContractResponse);
}

message ExecutionRequest {
    string id_to         = 1;
    string function_call = 2;
    bytes  parameters    = 3;
    string region_id     = 4;
    // Add optional fields for TEE-specific configuration
    bool   detailed_proof = 5;  // Match Rust ExecutionParams
    bytes  expected_hash  = 6;  // Match Rust ExecutionParams
}

message ExecutionResult {
    string timestamp = 1;
    repeated TEEAttestation attestations = 2;
    bytes state_hash = 3;
    bytes result     = 4;
    // Add fields from Rust ExecutionStats
    uint64 execution_time = 5;  // Time taken in milliseconds
    uint64 memory_used    = 6;  // Memory used during execution
    uint64 syscall_count  = 7;  // Number of system calls made
}

message TEEAttestation {
    bytes  enclave_id   = 1;
    bytes  measurement  = 2;
    string timestamp    = 3;
    bytes  data         = 4;
    bytes  signature    = 5;
    bytes  region_proof = 6;
    // Add field for platform-specific data
    string enclave_type = 7;  // "SGX" or "SEV"
}

message Event {
    string id            = 1;
    string function_call = 2;
    bytes  parameters    = 3;
    string region_id     = 4;
    string timestamp     = 5;
    repeated TEEAttestation attestations = 6;
}

message GetRegionsRequest {}

message GetRegionsResponse {
    repeated Region regions = 1;
}

message Region {
    string id = 1;
    string created_at = 2;
    repeated string worker_ids = 3;
    // Add fields for region capabilities
    repeated string supported_tee_types = 4;  // List of supported TEE types
    uint32 max_tasks = 5;                     // Maximum concurrent tasks
}

message RegionAttestations {
    repeated TEEAttestation attestations = 1;
}

message GetAttestationsRequest {
    string region_id = 1;
}

message CreateContractRequest {
    bytes  wasm_code  = 1;  // The WASM bytecode of the contract
    string region_id  = 2;  // The region to deploy to
}

message CreateContractResponse {
    string address      = 1;  // The deployed contract's address
    bytes  state_hash   = 2;  // Initial state hash after deployment
    string timestamp    = 3;  // Deployment timestamp
    repeated TEEAttestation attestations = 4;  // Attestations from the TEE
}
